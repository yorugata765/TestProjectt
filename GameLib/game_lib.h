#ifndef INCLUDED_GAME_LIB
#define INCLUDED_GAME_LIB
//******************************************************************************
//
//      GameLib
//
//      ECC College of Computer & Multimedia
//
//******************************************************************************

//------< インクルード >----------------------------------------------------------
#define NOMINMAX
#include <Windows.h>
#include <d3d11.h>
//#include <Box2D/Box2D.h>

#include "system.h"
#include "debug.h"
#include "primitive.h"
#include "blender.h"

#include "dxtk_audio.h"
#include "texture.h"
#include "font.h"

#include "input_manager.h"

namespace GameLib
{
// Y軸上が正なら下記を有効にします
//#define GAMELIB_PLUS_UP // Y軸上が正

    //==========================================================================
    //
    //		ライブラリ初期設定＆終了処理、Windows APIなど
    //
    //==========================================================================

    //--------------------------------------------------------------
    //  ライブラリ初期設定
    //--------------------------------------------------------------
    //  LPCTSTR caption     タイトルバーに表示される見出し
    //  int width           ウインドウの幅
    //  int height          ウインドウの高さ
    //  bool isFullscreen   フルスクリーンにするかどうか（Releaseモード時のみ有効）
    //  double frameRate    フレームレート
    //--------------------------------------------------------------
    void init(LPCTSTR, int width = ( 640 ), int height = ( 480 ),
        bool isFullscreen = ( false ), double frameRate = ( GameLib::system::FRAME_RATE ));

    //--------------------------------------------------------------
    //  ライブラリ終了処理
    //--------------------------------------------------------------
    void uninit();

    //--------------------------------------------------------------
    //  ゲームループ（実態はメッセージループ）
    //--------------------------------------------------------------
    //  bool isShowFrameRate  フレームレートを表示させるか
    //--------------------------------------------------------------
    //  戻り値：bool           WM_QUITが発行されるとfalseを返す
    //--------------------------------------------------------------
    bool gameLoop(bool isShowFrameRate = ( false ));

    //--------------------------------------------------------------
    //  画面クリア
    //--------------------------------------------------------------
    //  VECTOR4* color          塗りつぶす色 (r, g, b, a)
    //--------------------------------------------------------------
    void clear(const VECTOR4&);

    //--------------------------------------------------------------
    //  画面クリア
    //--------------------------------------------------------------
    //  float r                 塗りつぶす色 (r)
    //  float g                 塗りつぶす色 (g)
    //  float b                 塗りつぶす色 (b)
    //--------------------------------------------------------------
    void clear(float r = ( 0.0f ), float g = ( 0.0f ), float b = ( 0.0f ));

    //--------------------------------------------------------------
    //  画面フリップ
    //--------------------------------------------------------------
    //  UINT SyncInterval       1を設定
    //  UINT Flags              0を設定
    //--------------------------------------------------------------
    HRESULT present(UINT SyncInterval = ( 1 ), UINT Flags = ( 0 ));

    //--------------------------------------------------------------
    //  ブレンドモード設定
    //--------------------------------------------------------------
    //  const Blender::BLEND_STATE& blend      ブレンドステート
    //--------------------------------------------------------------
    void setBlendMode(Blender::BLEND_STATE);

    Blender::BLEND_STATE getBlendMode();

    //--------------------------------------------------------------
    //  ステンシルをクリア
    //--------------------------------------------------------------
    void clearStencil();

    //--------------------------------------------------------------
    //  スプライト読み込み
    //--------------------------------------------------------------
    //  const wchar_t* fileName ファイルの名前
    //--------------------------------------------------------------
    //  戻り値：Sprite*         読み込まれたスプライトのポインタ
    //--------------------------------------------------------------
    Sprite* sprite_load(const wchar_t*, int nBufSize = ( 4 ));

    //--------------------------------------------------------------
    //  スプライト描画
    //--------------------------------------------------------------
    //  Sprite* pSpr            スプライトのポインタ
    //  float x, float y        描画位置
    //  float sx, float sy      描画スケール
    //  float tx, float ty,     元画像位置
    //  float tw, float th,     元画像の幅、高さ
    //  float cx, float cy,     元画像の基準点
    //  float angle,            描画する角度
    //  float r, g, b, a        色（r, g, b, a)
    //  float z                 デプス値(0.0f ~ 1.0f)
    //  bool  world             true:ワールド座標に描画 false:スクリーン座標に描画
    //--------------------------------------------------------------
    void sprite_render(Sprite*, 
        float, float, float sx = ( 1.0f ), float sy = ( 1.0f ),
        float tx = ( 0.0f ), float ty = ( 0.0f ), float tw = ( FLT_MIN ), float th = ( FLT_MIN ),
        float cx = ( 0.0f ), float cy = ( 0.0f ), float angle = ( 0.0f ), 
        float r = ( 1.0f ), float g = ( 1.0f ), float b = ( 1.0f ), float a = ( 1.0f), 
        float z = ( 0.5f ),
        bool world = ( false ));

    //--------------------------------------------------------------
    //  四角ポリゴン描画（頂点指定）
    //--------------------------------------------------------------
    //  Sprite* pSpr            スプライトのポインタ
    //  const VECTOR2(&v)[4]    4頂点の座標
    //  float tx, float ty,     元画像位置
    //  float tw, float th,     元画像の幅、高さ
    //  float r, g, b, a        色（r, g, b, a)
    //  float z                 デプス値(0.0f ~ 1.0f)
    //  bool world              true:ワールド座標に描画 false:スクリーン座標に描画
    //--------------------------------------------------------------
    void sprite_quad(Sprite*, 
        const VECTOR2(&v)[4],
        float tx = ( 0.0f ), float ty = ( 0.0f ), float tw = ( 0.0f ), float th = ( 0.0f ),
        float r = ( 1.0f ), float g = ( 1.0f ), float b = ( 1.0f ), float a = ( 1.0f ), 
        float z = ( 0.5f ),
        bool world = ( false ));

    //--------------------------------------------------------------
    //  トライアングルストリップ
    //--------------------------------------------------------------
    //  Sprite* pSpr            スプライトのポインタ
    //  VECTOR3* pVertex        頂点のバッファ
    //  VECTOR4* pColor         頂点カラーのバッファ
    //  VECTOR2* pUvs           UV座標のバッファ
    //  int nVert               総頂点数
    //  int nPolygon            ポリゴン数
    //  float z         デプス値(0.0f ~ 1.0f)
    //  bool world              true:ワールド座標に描画 false:スクリーン座標に描画
    //--------------------------------------------------------------
    void draw_triangle_strip(Sprite*,
        VECTOR3* pVertex, VECTOR4* pColor, VECTOR2* pUvs,
        int nVertex, int nPolygon, 
        float z = ( 0.5f ),
        bool world = ( false ));

    //--------------------------------------------------------------
    //  トライアングルズ（インデックスド）
    //--------------------------------------------------------------
    //  Sprite* pSpr            スプライトのポインタ
    //  VECTOR3* pVertex        頂点のバッファ
    //  VECTOR4* pColor         頂点カラーのバッファ
    //  VECTOR2* pUvs           UV座標のバッファ
    //  short* pIndices         インデックスバッファ
    //  int nVertex             頂点数
    //  int nPolygon            ポリゴン数
    //  float z                 デプス値(0.0f ~ 1.0f)
    //  bool world              true:ワールド座標に描画 false:スクリーン座標に描画
    //--------------------------------------------------------------
    void draw_triangles_indexed(Sprite*, 
        VECTOR3* pVertex, VECTOR4* pColor, VECTOR2* pUvs,
        short* pIndices, int nVertex, int nPolygon, 
        float z = ( 0.5f ),
        bool world = (false));

    //--------------------------------------------------------------
    //  トライアングルファン（インデックスド）
    //--------------------------------------------------------------
    //  Sprite* pSpr            スプライトのポインタ
    //  VECTOR3* pVertex        頂点のバッファ
    //  VECTOR4* pColor         頂点カラーのバッファ
    //  VECTOR2* pUvs           UV座標のバッファ
    //  short* pIndices         インデックスバッファ
    //  int nVertex             頂点数
    //  int nPolygon            ポリゴン数
    //  float z                 デプス値(0.0f ~ 1.0f)
    //  bool world              true:ワールド座標に描画 false:スクリーン座標に描画
    //--------------------------------------------------------------
    void draw_triangle_fan_indexed(Sprite*, 
        VECTOR3* pVertex, VECTOR4* pColor, VECTOR2* pUvs,
        short* pIndices, int nVertex, int nPolygon, 
        float z = ( 0.5f ),
        bool world = (false));

    //--------------------------------------------------------------
    //  テキスト表示
    //--------------------------------------------------------------
    //  int fontNo                      フォント番号
    //  std::string str                 表示する文字列
    //  float x         float y         表示位置 (x, y)
    //  float scaleX    float scaleY    スケール (x, y)
    //  float r                         赤成分 (0.0f ~ 1.0f)
    //  float g                         緑成分 (0.0f ~ 1.0f)
    //  float b                         青成分 (0.0f ~ 1.0f)
    //  float a                         不透明度 (0.0f ~ 1.0f)
    //  TEXT_ALIGN align                文字のアライン（TEXT_ALIGNから選択）
    //  float z                         デプス値(0.0f ~ 1.0f)
    //--------------------------------------------------------------
    //  戻り値：float    表示した文字の高さを返す
    //--------------------------------------------------------------
    float text_out(int fontNo, std::string str,
        float x, float y, float scaleX = (1), float scaleY = (1),
        float r = (1), float g = (1), float b = (1), float a = (1),
        TEXT_ALIGN align = (TEXT_ALIGN::UPPER_LEFT), 
        float z = ( 0.5f ));

    //==========================================================================
    //
    //		DirectX11関連
    //
    //==========================================================================

    //------< DirectX11 >-------------------------------------------------------
    namespace DirectX11
    {

        //--------------------------------------------------------------
        //  DirectX11の初期化
        //--------------------------------------------------------------
        //  HWND hwnd           ウインドウハンドル
        //  int width           ウインドウの幅
        //  int height          ウインドウの高さ
        //  bool isFullscreen   フルスクリーンにするかどうか
        //--------------------------------------------------------------
        HRESULT init(HWND, int, int, bool);

        //--------------------------------------------------------------
        //  DirectX11の終了処理
        //--------------------------------------------------------------
        void uninit();

        //--------------------------------------------------------------
        //  デバイスの取得
        //--------------------------------------------------------------
        ID3D11Device* getDevice();

        //--------------------------------------------------------------
        //  コンテキストの取得
        //--------------------------------------------------------------
        ID3D11DeviceContext* getContext();
    }

    //==========================================================================
    //
    //		ウインドウ関連
    //
    //==========================================================================

    namespace window
    {

        //--------------------------------------------------------------
        //  ウインドウ初期設定（ウインドウを作成して表示する）
        //--------------------------------------------------------------
        //  LPCTSTR caption     タイトルバーに表示される見出し
        //  int width           ウインドウの幅
        //  int height          ウインドウの高さ
        //--------------------------------------------------------------
        //  戻り値：HWND         生成されたウインドウのハンドル
        //--------------------------------------------------------------
        HWND init(LPCTSTR, int, int);

        //--------------------------------------------------------------
        //  ウインドウ終了処理
        //--------------------------------------------------------------
        void uninit();

        //--------------------------------------------------------------
        //  ウインドウハンドルの取得
        //--------------------------------------------------------------
        HWND getHwnd();

        //--------------------------------------------------------------
        //  ウインドウの幅を取得
        //--------------------------------------------------------------
        float getWidth();
        int   getWidthInt();

        //--------------------------------------------------------------
        //  ウインドウの高さを取得
        //--------------------------------------------------------------
        float getHeight();
        int   getHeightInt();
    }

    //==========================================================================
    //
    //		テクスチャ
    //
    //==========================================================================

    namespace texture
    {

        //--------------------------------------------------------------
        //  テクスチャマネージャ初期化
        //--------------------------------------------------------------
        //  size_t max      テクスチャの最大数を設定
        //--------------------------------------------------------------
        void init(size_t);

        //--------------------------------------------------------------
        //  テクスチャマネージャ終了処理
        //--------------------------------------------------------------
        void uninit();

        //--------------------------------------------------------------
        //  テクスチャのロード（空き番号を探してロード）
        //--------------------------------------------------------------
        //  const wchar_t* fileName     テクスチャファイルのパス
        //  size_t maxInstance          インスタンスの最大数
        //--------------------------------------------------------------
        //  戻り値：テクスチャ番号、-1：ロードエラー
        //--------------------------------------------------------------
        int load(const wchar_t*, size_t maxInstance = ( 1U ));

        //--------------------------------------------------------------
        //  テクスチャのロード（番号を指定してロード）
        //--------------------------------------------------------------
        //  int texNo                   テクスチャのインデックス
        //  const wchar_t* fileName     テクスチャファイルのパス
        //  size_t maxInstance          インスタンスの最大数
        //--------------------------------------------------------------
        void load(int, const wchar_t*, size_t maxInstance = ( 1U ));

        //--------------------------------------------------------------
        //  テクスチャのロード（ロードテクスチャのデータを使ってロード）
        //--------------------------------------------------------------
        //  LoadTexture* data       テクスチャ読み込み用データ
        //--------------------------------------------------------------
        void load(const LoadTexture*);

        //--------------------------------------------------------------
        //  テクスチャの解放（番号を指定して解放）
        //--------------------------------------------------------------
        //  int texNo   テクスチャのインデックス
        //--------------------------------------------------------------
        void release(int);

        //--------------------------------------------------------------
        //  テクスチャの解放（ロードテクスチャのデータを使って解放）
        //--------------------------------------------------------------
        //  LoadTexture* data   テクスチャ読み込み用データ
        //--------------------------------------------------------------
        void release(const LoadTexture*);

        //--------------------------------------------------------------
        //  テクスチャの解放（全て）
        //--------------------------------------------------------------
        void releaseAll();

        //--------------------------------------------------------------
        //  描画の前処理
        //--------------------------------------------------------------
        //  int texNo           描画を開始するテクスチャNo.
        //--------------------------------------------------------------
        void begin(int);

        //--------------------------------------------------------------
        //  描画の後処理
        //--------------------------------------------------------------
        //  int texNo           描画を終えるテクスチャNo.
        //--------------------------------------------------------------
        void end(int);

        //--------------------------------------------------------------
        //  テクスチャの描画
        //--------------------------------------------------------------
        //  int texNo                          テクスチャのインデックス
        //  float x, float y                   位置
        //  float scaleX, float scaleY         スケール
        //  float left, float top              切抜位置
        //  float width, float height          切抜サイズ
        //  float centerX, float centerY       中心
        //  float angle                        角度(radian)
        //  float r, float g, float b, float a 色
        //  float z                            デプス値(0.0f ~ 1.0f)
        //  bool  world                        true:ワールド座標に描画 false:スクリーン座標に描画
        //--------------------------------------------------------------
        void draw(int texNo, 
            float x, float y, float scaleX = ( 1 ), float scaleY = ( 1 ), 
            float left = ( 0 ), float top = ( 0 ), float width = ( 0 ), float height = ( 0 ),
            float centerX = ( 0 ), float centerY = ( 0 ), float angle = ( 0 ), 
            float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), float a = ( 1 ), 
            float z = ( 0.5f ), 
            bool world = ( false ));

        //--------------------------------------------------------------
        //  テクスチャの描画
        //--------------------------------------------------------------
        //  int texNo                  テクスチャのインデックス
        //  const VECTOR2& position    位置
        //  const VECTOR2& scale       スケール
        //  const VECTOR2& texPos      切抜位置
        //  const VECTOR2& texSize     切抜サイズ
        //  const VECTOR2& center      中心
        //  float angle                角度(radian)
        //  const VECTOR4& color       色
        //  float z                    デプス値(0.0f ~ 1.0f)
        //  bool  world                true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void draw(int texNo, 
            const VECTOR2& position, const VECTOR2& scale = ( VECTOR2(1, 1) ), 
            const VECTOR2& texPos= ( VECTOR2(0, 0) ), const VECTOR2& texSize = ( VECTOR2(0, 0) ),
            const VECTOR2& center = ( VECTOR2(0, 0) ), float angle = 0, 
            const VECTOR4& color = ( VECTOR4(1, 1, 1, 1) ), 
            float z = (0.5f),
            bool world = ( false ));

    }

    //==========================================================================
    //
    //		primitive
    //
    //==========================================================================

    namespace primitive
    {

        //--------------------------------------------------------------
        //  矩形描画
        //--------------------------------------------------------------
        //  float x         描画位置x     float y        描画位置y
        //  float w         幅            float h        高さ
        //  float centerX   基準点x       float centerY  基準点y
        //  float angle     角度 (radian)
        //  float r         色 r (0.0f ~ 1.0f)
        //  float g         色 g (0.0f ~ 1.0f)
        //  float b         色 b (0.0f ~ 1.0f)
        //  float a         色 a (0.0f ~ 1.0f)
        //  float z         デプス値(0.0f ~ 1.0f)
        //  bool world true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void rect(float x, float y, float w, float h,
            float cx = ( 0 ), float cy = ( 0 ), float angle = ( 0 ),
            float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), float a = ( 1 ), 
            float z = (0.5f),
            bool world = ( false ));

        //--------------------------------------------------------------
        //  矩形描画
        //--------------------------------------------------------------
        //  const VECTOR2& pos      描画位置 (x, y)
        //  const VECTOR2& size     幅高さ   (w, h)
        //  const VECTOR2& center   基準点   (x, y)
        //  float angle             角度     (radian)
        //  const VECTOR4& color    色       (r, g, b, a) (0.0f ~ 1.0f)
        //  float z                 デプス値(0.0f ~ 1.0f)
        //  bool  world             true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void rect(const VECTOR2& pos, const VECTOR2& size,
            const VECTOR2& center = ( VECTOR2(0, 0) ), float angle = ( 0 ),
            const VECTOR4& color = ( VECTOR4(1, 1, 1, 1) ), 
            float z = ( 0.5f ), 
            bool world = (false));

        //--------------------------------------------------------------
        //  線描画
        //--------------------------------------------------------------
        //  float x1        始点 x    float y1    // 始点 y
        //  float x2        終点 x    float y2    // 終点 y
        //  float r         色 r (0.0f ~ 1.0f)
        //  float g         色 g (0.0f ~ 1.0f)
        //  float b         色 b (0.0f ~ 1.0f)
        //  float a         色 a (0.0f ~ 1.0f)
        //  float width     幅
        //  float z         デプス値(0.0f ~ 1.0f)
        //  bool world true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void line(float x1, float y1, float x2, float y2,
            float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), float a = ( 1 ),
            float width = ( 1 ), 
            float z = ( 0.5f ), 
            bool world = ( false ));

        //--------------------------------------------------------------
        //  線描画
        //--------------------------------------------------------------
        //  const VECTOR2& from     始点 (x, y)
        //  const VECTOR2& to       終点 (x, y)
        //  const VECTOR4& color    色   (r, g, b, a)
        //  float width             幅
        //  float z                 デプス値(0.0f ~ 1.0f)
        //  bool world              true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void line(const VECTOR2& from, const VECTOR2& to,
            const VECTOR4& color = ( VECTOR4(1, 1, 1, 1) ), float width = ( 1 ), 
            float z = ( 0.5f ), 
            bool world = ( false ));

        //--------------------------------------------------------------
        //  円描画
        //--------------------------------------------------------------
        //  float x         中心位置 x
        //  float y         中心位置 y
        //  float radius    半径
        //  float sx        スケールx
        //  float sy        スケールy
        //  float angle     角度
        //  float r         色 r (0.0f ~ 1.0f)
        //  float g         色 g (0.0f ~ 1.0f)
        //  float b         色 b (0.0f ~ 1.0f)
        //  float a         色 a (0.0f ~ 1.0f)
        //  int n           何角形か
        //  float z         デプス値(0.0f ~ 1.0f)
        //  bool world      true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void circle(float x, float y, float radius, 
            float sx = ( 1 ), float sy = ( 1 ), float angle = ( 0 ), 
            float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), float a = ( 1 ),
            int n = ( 32 ), 
            float z = ( 0.5f ), 
            bool world = ( false ));

        //--------------------------------------------------------------
        //  円描画
        //--------------------------------------------------------------
        //  const VECTOR2& pos      中心位置 (x, y)
        //  float radius            半径
        //  const VECTOR2& scale    スケール
        //  float angle             角度
        //  const VECTOR4& color    色   (r, g, b, a)
        //  int n                   何角形か
        //  float z                 デプス値(0.0f ~ 1.0f)
        //  bool world              true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void circle(const VECTOR2& pos, float radius, const VECTOR2& scale = ( VECTOR2(1, 1) ), float angle = (0),
            const VECTOR4& color = ( VECTOR4(1, 1, 1, 1) ), 
            int n = ( PRIMITIVE_CIRCLE_SIDE_NUM ), 
            float z = ( 0.5f ), 
            bool world = ( false ));

        //--------------------------------------------------------------
        //  四角ポリゴン描画（頂点指定）
        //--------------------------------------------------------------
        //  const VECTOR2(&v)[4]    頂点の配列（大きさ4）
        //  float r         色 r (0.0f ~ 1.0f)
        //  float g         色 g (0.0f ~ 1.0f)
        //  float b         色 b (0.0f ~ 1.0f)
        //  float a         色 a (0.0f ~ 1.0f)
        //  float z         デプス値(0.0f ~ 1.0f)
        //  bool world true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void quad(const VECTOR2(&v)[4],
            float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), float a = ( 1 ), 
            float z = ( 0.5f ), 
            bool world = ( false ));

        //--------------------------------------------------------------
        //  四角ポリゴン描画（頂点指定）
        //--------------------------------------------------------------
        //  const VECTOR2(&v)[4]    頂点の配列（大きさ4）
        //  const VECTOR4& color    色 (r, g, b, a)
        //  float z                 デプス値(0.0f ~ 1.0f)
        //  bool  world             true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void quad(const VECTOR2(&v)[4],
            const VECTOR4& color = ( VECTOR4(1, 1, 1, 1) ), 
            float z = ( 0.5f ), 
            bool world = ( false ));

        void draw_triangle_fan(const VECTOR2 vertex[], const VECTOR4& color, int nPolygon, 
            float z = ( 0.5f ), 
            bool world = ( false ));
    }

    //==========================================================================
    //
    //		primitive_batch
    //
    //==========================================================================

    namespace primitive_batch
    {

        //--------------------------------------------------------------
        //	前処理
        //--------------------------------------------------------------
        void begin();

        //--------------------------------------------------------------
        //  後処理
        //--------------------------------------------------------------
        void end();

        //--------------------------------------------------------------
        //  矩形描画
        //--------------------------------------------------------------
        //  float x         float y     中心位置 (x, y)
        //  float w         float h     幅・高さ (w, h)
        //  float cx        float cy    中心 (cx, cy)
        //  float angle     角度 (radian)
        //  float r         色r  (0.0f ~ 1.0f)
        //  float g         色g  (0.0f ~ 1.0f)
        //  float b         色b  (0.0f ~ 1.0f)
        //  float a         色a  (0.0f ~ 1.0f)
        //  float z         デプス値(0.0f ~ 1.0f)
        //  bool world true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void rect(float x, float y, float w, float h,
            float cx = ( 0 ), float cy = ( 0 ), float angle = ( 0 ),
            float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), float a = ( 1 ), 
            float z = ( 0.5f ), 
            bool world = ( false ));

        //--------------------------------------------------------------
        //  矩形描画
        //--------------------------------------------------------------
        //  const VECTOR2& pos      中心位置 (x, y)
        //  const VECTOR2& size     幅高さ   (w, h)
        //  const VECTOR2& center   中心     (x, y)
        //  float angle             角度     (radian)
        //  const VECTOR4& color    色       (r, g, b, a)
        //  float z                 デプス値(0.0f ~ 1.0f)
        //  bool world              true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void rect(const VECTOR2& pos, const VECTOR2& size,
            const VECTOR2& center = ( VECTOR2(0, 0) ), float angle = ( 0 ),
            const VECTOR4& color = ( VECTOR4(1, 1, 1, 1) ), 
            float z = ( 0.5f ), 
            bool world = ( false ));

        //--------------------------------------------------------------
        //  線描画
        //--------------------------------------------------------------
        //  float x1        始点 x
        //  float y1        始点 y
        //  float x2        終点 x
        //  float y2        終点 y
        //  float r         色 r (0.0f ~ 1.0f)
        //  float g         色 g (0.0f ~ 1.0f)
        //  float b         色 b (0.0f ~ 1.0f)
        //  float a         色 a (0.0f ~ 1.0f)
        //  float width     幅
        //  float z         デプス値(0.0f ~ 1.0f)
        //  bool world true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void line(float x1, float y1, float x2, float y2,
            float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), float a = ( 1 ),
            float width = ( 1 ), 
            float z = ( 0.5f ), 
            bool world = ( false ));

        //--------------------------------------------------------------
        //  線描画
        //--------------------------------------------------------------
        //  const VECTOR2& from     始点 (x, y)
        //  const VECTOR2& to       終点 (x, y)
        //  const VECTOR4& color    色   (r, g, b, a)
        //  float width             幅
        //  float z                 デプス値(0.0f ~ 1.0f)
        //  bool world         true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void line(const VECTOR2& from, const VECTOR2& to,
            const VECTOR4& color = ( VECTOR4(1, 1, 1, 1) ), float width = ( 1 ), 
            float z = ( 0.5f ), 
            bool world = ( false ));

    }

    //==========================================================================
    //
    //		music
    //
    //==========================================================================

    namespace music
    {

        //--------------------------------------------------------------
        //  音楽のロード
        //--------------------------------------------------------------
        //  int trackNo    読み込むトラックのインデックス(0 ~ 31)
        //  const wchar_t* 音楽ファイルのパス(*.wav形式のみ)
        //  float volume   音楽のボリューム(0.0f ~ 1.0f)
        //--------------------------------------------------------------
        void load(int, const wchar_t*, float volume = ( 0.5f ));

        //--------------------------------------------------------------
        //  音楽の解放
        //--------------------------------------------------------------
        //  int trackNo    解放するトラックのインデックス(0 ~ 31)
        //--------------------------------------------------------------
        void unload(int);

        //--------------------------------------------------------------
        //  音楽の再生
        //--------------------------------------------------------------
        //  int trackNo    再生するトラックのインデックス(0 ~ 31)
        //  bool isLoop    ループ再生するかどうか(する:true,しない:false)
        //--------------------------------------------------------------
        void play(int, bool isLoop = ( false ));

        //--------------------------------------------------------------
        //  音楽の停止
        //--------------------------------------------------------------
        //  int trackNo    停止するトラックのインデックス(0 ~ 31)
        //--------------------------------------------------------------
        void stop(int);

        //--------------------------------------------------------------
        //  音楽の停止（全て）
        //--------------------------------------------------------------
        void stop();

        //--------------------------------------------------------------
        //  音楽（個別）の一時停止
        //--------------------------------------------------------------
        //  int trackNo    一時停止するトラックのインデックス(0 ~ 31)
        //--------------------------------------------------------------
        void pause(int);

        //--------------------------------------------------------------
        //  音楽の一時停止
        //--------------------------------------------------------------
        void pause();

        //--------------------------------------------------------------
        //  音楽（個別）の再開(pauseからの再開)
        //--------------------------------------------------------------
        //  int trackNo    再開させるトラックのインデックス(0 ~ 31)
        //--------------------------------------------------------------
        void resume(int);

        //--------------------------------------------------------------
        //  音楽の再開(pauseからの再開)
        //--------------------------------------------------------------
        void resume();

        //--------------------------------------------------------------
        //  音楽のボリューム設定
        //--------------------------------------------------------------
        //  int trackNo    ボリュームを設定するトラックのインデックス(0 ~ 31)
        //  float volume   音楽のボリューム(0.0f ~ 1.0f)
        //--------------------------------------------------------------
        void setVolume(int, float);

        //--------------------------------------------------------------
        //  音楽のボリューム取得
        //--------------------------------------------------------------
        //  int trackNo    ボリュームを取得するトラックのインデックス(0 ~ 31)
        //--------------------------------------------------------------
        float getVolume(int);

        //--------------------------------------------------------------
        //  音楽のフェードイン・フェードアウト
        //--------------------------------------------------------------
        //  int trackNo     フェードさせるトラックのインデックス(0 ~ 31)
        //  float fadeTime  フェード時間
        //  float volume    フェード後のボリューム
        //--------------------------------------------------------------
        void fade(int, float, float volume = ( 0.0f ));

        //--------------------------------------------------------------
        //  音楽のアップデート
        //--------------------------------------------------------------
        void update();

        //--------------------------------------------------------------
        //  音楽のクリア
        //--------------------------------------------------------------
        void clear();

        //--------------------------------------------------------------
        //  SoundStateの取得
        //  int trackNo                     トラック番号 (0 ~ 31)
        //--------------------------------------------------------------
        DirectX::SoundState getState(int);

        //--------------------------------------------------------------
        //  ループの有無の取得
        //  int     trackNo                 トラック番号 (0 ~ 31)
        //--------------------------------------------------------------
        bool isLooped(int);

        //--------------------------------------------------------------
        //  panの設定
        //  int     trackNo                 トラック番号 (0 ~ 31)
        //  float   pan                     pan (-1.0f ~ 1.0f)
        //--------------------------------------------------------------
        void setPan(int, float);

        //--------------------------------------------------------------
        //  panの取得
        //  int     trackNo                 トラック番号 (0 ~ 31)
        //--------------------------------------------------------------
        //  戻り値：float                    現在のpanの値を返す
        //--------------------------------------------------------------
        float getPan(int);

        //--------------------------------------------------------------
        //  panの調整
        //  int     trackNo                 トラック番号 (0 ~ 31)
        //  float   add                     加える数値
        //--------------------------------------------------------------
        //  戻り値：float                    調整後のpanの値を返す
        //--------------------------------------------------------------
        float adjustPan(int, float);

        //--------------------------------------------------------------
        //  pitchの設定
        //  int trackNo                     トラック番号 (0 ~ 31)
        //  float pitch                     pitch (-1.0f ~ 1.0f)
        //--------------------------------------------------------------
        void setPitch(int, float);

        //--------------------------------------------------------------
        //  pitchの取得
        //  int     trackNo                 トラック番号 (0 ~ 31)
        //--------------------------------------------------------------
        //  戻り値：float                    現在のpitchの値を返す
        //--------------------------------------------------------------
        float getPitch(int);

        //--------------------------------------------------------------
        //  pitchの調整
        //  int     trackNo                 トラック番号 (0 ~ 31)
        //  float   add                     加える数値
        //--------------------------------------------------------------
        //  戻り値：float                    調整後のpitchの値を返す
        //--------------------------------------------------------------
        float adjustPitch(int, float);

        //--------------------------------------------------------------
        //  フォーマットの取得
        //  int trackNo                     トラック番号 (0 ~ 31)
        //--------------------------------------------------------------
        const WAVEFORMATEX* getFormat(int);

        //--------------------------------------------------------------
        //  音楽が使用可能かどうか
        //  int trackNo                     トラック番号 (0 ~ 31)
        //--------------------------------------------------------------
        bool isInUse(int);
    }

    //==========================================================================
    //
    //		sound
    //
    //==========================================================================

    namespace sound
    {

        //--------------------------------------------------------------
        //  効果音ファイルのロード
        //--------------------------------------------------------------
        //  int   xwbNo                 xwbのインデックス
        //  const wchar_t* xwbFileName  効果音ファイルのパス
        //  float volume                効果音のボリューム(0.0f ~ 1.0f)
        //--------------------------------------------------------------
        void load(int, const wchar_t*, float volume = ( 0.5f ));

        //--------------------------------------------------------------
        //  効果音の再生
        //--------------------------------------------------------------
        //  int xwbNo       xwbのインデックス
        //  int trackNo     効果音のインデックス
        //--------------------------------------------------------------
        void play(int, int);

        //--------------------------------------------------------------
        //  効果音の停止
        //--------------------------------------------------------------
        //  int xwbNo       xwbのインデックス
        //  int trackNo     効果音のインデックス
        //--------------------------------------------------------------
        void stop(int, int);

        //--------------------------------------------------------------
        //  効果音のボリューム設定
        //--------------------------------------------------------------
        //  int xwbNo      xwbのインデックス
        //  int trackNo    設定する効果音のインデックス(0 ~ 127)
        //  float volume   効果音のボリューム(0.0f ~ 1.0f)
        //--------------------------------------------------------------
        void setVolume(int, int, float);
    }

    //==========================================================================
    //
    //		debug
    //
    //==========================================================================

    namespace debug
    {
        //--------------------------------------------------------------
        //  デバッグ文字列をセットする（キューに格納する）
        //--------------------------------------------------------------
        //  const char* format, ...     表示する文字列(printfと同じ書式)
        //--------------------------------------------------------------
        void setString(const char*, ...);

        //--------------------------------------------------------------
        //  デバッグ文字列を表示させる
        //--------------------------------------------------------------
        //  float r     赤成分(0.0f ~ 1.0f)
        //  float g     緑成分(0.0f ~ 1.0f)
        //  float b     青成分(0.0f ~ 1.0f)
        //  float sx    スケールx
        //  float sy    スケールy
        //--------------------------------------------------------------
        void display(float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), 
            float sx = ( 1 ), float sy = ( 1 ));

    }

    //==========================================================================
    //
    //		font
    //
    //==========================================================================

    namespace font
    {
        //--------------------------------------------------------------
        //  テキスト表示
        //--------------------------------------------------------------
        //  int fontNo                      フォント番号
        //  std::string                     表示する文字列
        //  float x         float y         表示位置 (x, y)
        //  float scaleX    float scaleY    スケール (x, y)
        //  float r                         赤成分 (0.0f ~ 1.0f)
        //  float g                         緑成分 (0.0f ~ 1.0f)
        //  float b                         青成分 (0.0f ~ 1.0f)
        //  float a                         不透明度 (0.0f ~ 1.0f)
        //  TEXT_ALIGN align                文字のアライン（TEXT_ALIGNから選択）
        //  float z                         デプス値(0.0f ~ 1.0f)
        //  bool world                      true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        //  戻り値：float    表示した文字の高さを返す
        //--------------------------------------------------------------
        float textOut(int fontNo, std::string str,
            float x, float y, float scaleX = ( 1 ), float scaleY = ( 1 ),
            float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), float a = ( 1 ), 
            TEXT_ALIGN align = (TEXT_ALIGN::UPPER_LEFT ),
            float z = (0.0f), 
            bool world = ( false ));

        //--------------------------------------------------------------
        //  テキスト表示
        //--------------------------------------------------------------
        //  int fontNo                  フォント番号
        //  std::string                 表示する文字列
        //  const VECTOR2&  position    表示位置 (x, y)
        //  const VECTOR2&  scale       スケール (x, y)
        //  const VECTOR4&  color       色 (r, g, b, a)
        //  TEXT_ALIGN      align       文字のアライン（TEXT_ALIGNから選択）
        //  float           z           デプス値(0.0f ~ 1.0f)
        //  bool            world       true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        //  戻り値：float    表示した文字の高さを返す
        //--------------------------------------------------------------
        float textOut(int fontNo, std::string str,
            const VECTOR2& position, const VECTOR2& scale = ( VECTOR2(1, 1) ),
            const VECTOR4& color = ( VECTOR4(1, 1, 1, 1) ), 
            TEXT_ALIGN align = (TEXT_ALIGN::UPPER_LEFT ),
            float z = (0.0f), 
            bool world = ( false ));

        LPCSTR FormatString(LPCSTR format, ...);

    }

    //==========================================================================
    //
    //		input
    //
    //==========================================================================

    namespace input
    {

        //--------------------------------------------------------------
        //  入力マネージャの初期化
        //--------------------------------------------------------------
        void init();

        //--------------------------------------------------------------
        //  入力マネージャの更新
        //--------------------------------------------------------------
        void update();

        //--------------------------------------------------------------
        //  トリガー（押した瞬間）情報の取得
        //--------------------------------------------------------------
        //  int player      何コンか(0 ~ 3)
        //--------------------------------------------------------------
        //  戻り値：int     指定したプレイヤーのトリガー情報
        //--------------------------------------------------------------
        int TRG(int);

        //--------------------------------------------------------------
        //  トリガー（離した瞬間）情報の取得
        //--------------------------------------------------------------
        //  int player      何コンか(0 ~ 3)
        //--------------------------------------------------------------
        //  戻り値：int     指定したプレイヤーのトリガー情報
        //--------------------------------------------------------------
        int TRG_RELEASE(int);

        //--------------------------------------------------------------
        //  ステート（状態）情報の取得
        //--------------------------------------------------------------
        //  int player      何コンか(0 ~ 3)
        //--------------------------------------------------------------
        //  戻り値：int     指定したプレイヤーのステート情報
        //--------------------------------------------------------------
        int STATE(int);

        //--------------------------------------------------------------
        //  リピート（繰返し）情報の取得
        //--------------------------------------------------------------
        //  int player      何コンか(0 ~ 3)
        //--------------------------------------------------------------
        //  戻り値：int     指定したプレイヤーのリピート情報
        //--------------------------------------------------------------
        int REPEAT(int);

        //--------------------------------------------------------------
        //  マウスカーソルのx座標を取得
        //--------------------------------------------------------------
        //  戻り値：int     マウスカーソルのx座標
        //--------------------------------------------------------------
        int getCursorPosX();

        //--------------------------------------------------------------
        //  マウスカーソルのy座標を取得
        //--------------------------------------------------------------
        //  戻り値：int     マウスカーソルのy座標
        //--------------------------------------------------------------
        int getCursorPosY();

        //--------------------------------------------------------------
        //  コントローラー情報の取得
        //--------------------------------------------------------------
        //  int player      何コンか(0 ~ 3)
        //--------------------------------------------------------------
        //  戻り値：GameLib::PadState*  指定したプレイヤーのコントローラー情報
        //--------------------------------------------------------------
        PadState* getPadState(int);

    }

    //==========================================================================
    //
    //		view
    //
    //==========================================================================

    namespace view
    {

        //--------------------------------------------------------------
        //  入力マネージャの初期化
        //--------------------------------------------------------------
        void init();

        //--------------------------------------------------------------
        //  スケールを設定
        //--------------------------------------------------------------
        void setScale(float);

        //--------------------------------------------------------------
        //  スケールを取得
        //--------------------------------------------------------------
        float getScale();

        //--------------------------------------------------------------
        //  Box2Dのスケールを設定
        //--------------------------------------------------------------
        void setBox2dScale(float);

        //--------------------------------------------------------------
        //  Box2Dのスケールを取得
        //--------------------------------------------------------------
        float getBox2dScale();

        //--------------------------------------------------------------
        //  中央のワールド座標を設定
        //--------------------------------------------------------------
        void setCenter(float, float);
        void setCenter(VECTOR2);

        //--------------------------------------------------------------
        //  画面左上のワールド座標を設定
        //--------------------------------------------------------------
        void setLeftTop(float, float);
        void setLeftTop(VECTOR2);

        //--------------------------------------------------------------
        //  画面左下のワールド座標を設定
        //--------------------------------------------------------------
        void setLeftBottom(float, float);
        void setLeftTop(VECTOR2);

        //--------------------------------------------------------------
        //  画面中央のワールド座標を取得
        //--------------------------------------------------------------
        VECTOR2 getCenter();

        //--------------------------------------------------------------
        //  画面左上のワールド座標を取得
        //--------------------------------------------------------------
        VECTOR2 getLeftTop();

        //--------------------------------------------------------------
        //  画面左下のワールド座標を取得
        //--------------------------------------------------------------
        VECTOR2 getLeftBottom();

        //--------------------------------------------------------------
        //  画面右上のワールド座標を取得
        //--------------------------------------------------------------
        VECTOR2 getRightTop();

        //--------------------------------------------------------------
        //  画面右下のワールド座標を取得
        //--------------------------------------------------------------
        VECTOR2 getRightBottom();

        //--------------------------------------------------------------
        //  画面の任意の座標にワールド座標を設定
        //--------------------------------------------------------------
        void setByPosition(VECTOR2, VECTOR2);

        //--------------------------------------------------------------
        //  Box2Dの座標をワールド座標に変換
        //--------------------------------------------------------------
        //VECTOR2 box2dToWorld(b2Vec2);

        //--------------------------------------------------------------
        //  ワールド座標をスクリーン座標へ変換
        //--------------------------------------------------------------
        VECTOR2 worldToScreen(VECTOR2);
        VECTOR3 worldToScreen(VECTOR3);

        //--------------------------------------------------------------
        //  スクリーン座標をワールド座標に変換
        //--------------------------------------------------------------
        VECTOR2 screenToWorld(VECTOR2);

        //--------------------------------------------------------------
        //  ワールド座標をBox2Dの座標に変換
        //--------------------------------------------------------------
        //b2Vec2 worldToBox2d(VECTOR2);

    }

    //----------------------------------------------------------------------------------
}


//******************************************************************************

#endif // !INCLUDED_GAME_LIB
